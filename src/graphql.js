import { ApolloServer, gql } from 'apollo-server-lambda'
import neo4j from 'neo4j-driver'
import { Neo4jGraphQL } from '@neo4j/graphql'

// const { neo4j } = require('neo4j-driver')
// const { Neo4jGraphQL } = require('@neo4j/graphql')
// const { ApolloServer, gql } = require('apollo-server-lambda')

// Construct a schema, using GraphQL schema language
const typeDefs = gql`
  type Course {
    id: ID
    name: String
    subject_code: String
    course_number: Int
    units: Int
    description: String
    subject: String
    college: String
    offered_by: String
    academic_career: String
    co_taught: String
    prerequisites_raw: String
    prerequisites: [Course]
      @relationship(
        type: "PREREQUISITE"
        properties: "Prerequisite"
        direction: OUT
      )
    unlocks: [Course]
      @relationship(
        type: "PREREQUISITE"
        properties: "Prerequisite"
        direction: IN
      )
  }

  type Requirement {
    units: Int
    description: String
    requirements: [Requirement]
      @relationship(type: "REQUIREMENT", direction: OUT)
    classes: [Course] @relationship(type: "REQUIREMENT", direction: OUT)
    specialisations: [Specialisation]
      @relationship(type: "REQUIREMENT", direction: OUT)
  }

  type Specialisation {
    id: ID
    name: String
    type: String
    units: Int
    requirements: [Requirement]
      @relationship(type: "REQUIREMENT", direction: OUT)
    classes: [Course]
      @cypher(statement: "MATCH (this)-[:REQUIREMENT*..5]->(s:Course) RETURN s")
  }

  type Program {
    id: ID
    name: String
    units: Int
    requirements: [Requirement]
      @relationship(type: "REQUIREMENT", direction: OUT)
    specialisations: [Specialisation]
      @cypher(statement: "MATCH (this)-[*..5]->(s:Specialisation) RETURN s")
  }
`

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(
    process.env.NEO4J_USER || 'neo4j',
    process.env.NEO4J_PASSWORD || 'neo4j'
  )
)

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Read more in the docs:
 * https://neo4j.com/docs/graphql-manual/current/
 */

const neoSchema = new Neo4jGraphQL({ typeDefs, driver })

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: {
    driver,
    driverConfig: { database: process.env.NEO4J_DATABASE || 'neo4j' },
  },
  schema: neoSchema.schema,
  introspection: true,
  playground: {
    endpoint: '/',
  },
})

module.exports.graphqlHandler = server.createHandler()
