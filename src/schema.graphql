scalar Point
scalar DateTime
scalar PointInput

# Relationship properties currently not available
# https://github.com/neo4j/graphql/pull/193
# interface Prerequisite @relationshipProperties {
#   id: String
#   description: String
# }

type Course {
  id: ID
  name: String
  subject_code: String
  course_number: Int
  units: Int
  description: String
  subject: String
  college: String
  offered_by: String
  academic_career: String
  co_taught: String
  prerequisites_raw: String,
  prerequisites: [Course] @relationship(type: "PREREQUISITE", properties: "Prerequisite", direction: OUT)
  unlocks: [Course] @relationship(type: "PREREQUISITE", properties: "Prerequisite", direction: IN)
}

type Requirement {
  units: Int
  description: String
  requirements: [Requirement]
    @relationship(type: "REQUIREMENT", direction: OUT)
  classes: [Course]
    @relationship(type: "REQUIREMENT", direction: OUT)
  specialisations: [Specialisation]
    @relationship(type: "REQUIREMENT", direction: OUT)
}

type Specialisation {
  id: ID
  name: String
  type: String
  units: Int
  requirements: [Requirement] @relationship(type: "REQUIREMENT", direction: OUT)
  classes: [Course]
    @cypher(
      statement: "MATCH (this)-[:REQUIREMENT*..5]->(s:Course) RETURN s"
    )
}

type Program {
  id: ID
  name: String
  units: Int
  requirements: [Requirement] @relationship(type: "REQUIREMENT", direction: OUT)
  specialisations: [Specialisation] 
    @cypher(
      statement: "MATCH (this)-[*..5]->(s:Specialisation) RETURN s"
    )
  classes: [Course]
    @cypher(
      statement: "MATCH (this)-[:REQUIREMENT*..5]->(s:Course) RETURN s"
    )
}